

# -	Id – a unique identifier
# -	location – coordinates array
# -	demand – value generated by the resource allocation optimization method; indicates how many bikes should be allocated to the station at the beginning of the day to meet the predicted demand
# -	minimum_bikes – a value to store the minimum number of bikes which should be allocated to the station each morning; the value has been added to promote a fair access to the service
# -	capacity – a value dictating a maximum number of bikes that can be parked at the station
# -	bikes_parked – an array of Bike objects that are parked at the station and available for rent
# -	docs_available – a number of free parking slots at the station


class Station:
    def __init__(self, id, coordinates, demand, capacity, bikes_parked: list):
        self.id = id
        self.location = coordinates
        self.demand = demand
        self.minimum_bikes = 0
        self.capacity = capacity
        self.bikes_parked = bikes_parked
        self.docs_available = self.capacity-len(self.bikes_parked)

    def get_docs_available(self):
        self.set_docs_available()
        return self.docs_available

    def set_docs_available(self):
        self.docs_available = self.capacity - len(self.bikes_parked)

    def get_station_id(self):
        return self.id

    def get_station_coordinates(self):
        return self.location

    def get_station_demand(self):
        return self.demand

    def get_station_demand(self):
        return self.demand

    def get_minimum_bikes(self):
        return self.minimum_bikes

    def set_minimum_bikes(self, bikes_no):
        self.minimum_bikes = bikes_no

    def set_station_demand(self, demand):
        self.demand = demand

    def set_station_location(self, coords):
        self.location = coords

    def set_station_id(self, id):
        self.id = id

    def get_station_capacity(self):
        return self.station_capacity

    def set_station_capacity(self, station_capacity):
        self.capacity = station_capacity

    def park_bike(self, bike):
        self.bikes_parked.append(bike)

    def move_bike(self, bike):
        self.bikes_parked.remove(bike)

    def to_string(self):
        return "{} {}".format(self.id, self.location)
