# Trip Class
# For collecting data about the user's journey
# Trip objects are generated by a simulation


# Import Classes
from .station import Station
from .bike import Bike
from .user import User

# Import modules
from datetime import datetime
import random
import datetime
from datetime import timedelta

# -	Id – an identifier
# -	bike – bike object that was rented for that journey
# -	user – user object
# -	starting_station – the docking station object from which the bike was hired
# -	destination_station – the docking station at which the bike was returned
# -	datetime_start – dateTime data for when the bike was rented
# -	datetime_end – dateTime data for when the bike was returned
# -	total_distance – a sum of distances (may differ from the distance between the starting station and destination stations as the user can be redirected to a different docking station if there is no parking slot available at the original destination station on arrival)
# -	duration – time difference between the time the bike was rented and returned 
# -	trip_stages - used to collect information about trip stages in case there is no bike available at the original docking station and an alternative destination needs to be generated, so the total distance and duration can be calculated
# -	trip_steps –  array of coordinates / used to emulate progressive movement of a bike on the map. The bike’s route (an array of the coordinates) obtained from the OpenRouteService API is broken down into smaller parts called steps.
# -	current_step -  integer - index pointing to the trip_stages array / allows to access ‘current’ location of the bike to be displayed on the map 
# -	trip_finished – Boolean value that indicates is the trip still in progress (the bike has not been returned yet)

class Trip:
    def __init__(self, bike: Bike, user: User, start: Station, destination: Station, datetime_start):
        self. id = random.randint(1000000000, 999999999999)
        self.id = str(self.id)
        self.bike = bike
        self.user = user
        self.starting_station = start
        self.destination_station = destination
        self.datetime_start = datetime_start
        self.datetime_end = datetime
        self.total_distance = 0
        self.duration = 0
        self.trip_stages = []
        self.trip_steps = []
        self.current_step = 0
        self.trip_finished = False

    # setters
    def set_trip_duration(self, duration):
        self.duration = self.duration+duration

    def set_trip_datetime_end(self):
        dur = int(self.duration)
        delta = timedelta(seconds=dur)
        self.datetime_end = self.datetime_start + delta

    # method used to add the trip stage data if the user is re-directed to different docking stations if no parking slots available
    def add_trip_stage(self, duration):
        stage = {
            'start_station': self.starting_station.to_string(),
            'destination_station': self.destination_station.to_string(),
            'duration': duration
        }
        self.trip_stages.append(stage)

    # textual representation of the trip duration
    def duration_to_text(self, duration):
        rest = 0
        duration_hours = duration // 3600
        dh = int(duration_hours)
        rest = duration % 3600
        duration_minutes = rest // 60
        dm = int(duration_minutes)
        duration_seconds = rest % 60
        ds = int(duration_seconds)
        if duration_hours > 0:
            duration_text = str(dh) + ' h ' + str(dm) + ' min ' + str(ds) + ' sec '

        if duration_hours <= 0:
            duration_text = str(dm) + ' min ' + str(ds) + ' sec '
        return duration_text

    # returns textual summary of the trip
    def print_summary(self):
        text = ''
        text += 'Summary:\n'
        total_duration = self.duration_to_text(self.duration)
        text += 'Total duration: ' + str(total_duration) + '\nTrip stages:\n'
        counter = 1
        for i in self.trip_stages:
            start = i.get('start_station')
            end = i.get('destination_station')
            duration = i.get('duration')
            dt = self.duration_to_text(duration)
            text += str(counter) + ': ' +  '\n'
            text += 'Startig Station: ' + start
            text+= ' Destination station: ' + end
            text += ' Duration: ' + dt
            text += '\n'
            counter+=1
        return text
